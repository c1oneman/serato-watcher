package org.ssldev.api;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.IntBuffer;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.ssldev.api.app.SslConvertApi;
import org.ssldev.api.consumption.SslBuffer;
import org.ssldev.api.messages.UnmarshalSeratoDbFileRequest;
import org.ssldev.core.mgmt.EventHub;
import org.ssldev.core.utils.Logger;

public class TestSeratoDbConversion {
	
	private EventHub hub = new EventHub();
	SslConvertApi api = new SslConvertApi(hub);

	@Before
	public void setUp() throws Exception {
		
		Logger.enableDebug(true); 
		Logger.enableFinest(false); 
		Logger.enableTrace(false);
//		hub.init();
//		hub.start();
	}

//	@Test
//	public void test() {
//		String dbPath = "/Users/elad/Desktop/test/1_song_db";
//		File smallDb = new File(dbPath);
//		assertTrue(smallDb.exists());
//		
//	}
	
	
	@Ignore
	@Test public void unmarshal_1SongDB() {
		String dbPath = "/Users/elad/Desktop/test/1_song_db";
		File smallDb = new File(dbPath);
		UnmarshalSeratoDbFileRequest msg = new UnmarshalSeratoDbFileRequest(smallDb);
		
		api.accept(msg);
	}
	
	@Ignore
	@Test public void unmarshal_2SongDB() {
		String dbPath = "/Users/elad/Desktop/test/2_song_db_2";
		File smallDb = new File(dbPath);
		UnmarshalSeratoDbFileRequest msg = new UnmarshalSeratoDbFileRequest(smallDb);
		
		api.accept(msg);
	}
	
	@Ignore
	@Test public void write_1SongDB() throws IOException {
		String dbPath = "/Users/elad/Desktop/test/1_song_db";
		File smallDb = new File(dbPath);
		
		SslBuffer buf = new SslBuffer(smallDb);
		int size = buf.size();
		/* 793
		 * [118, 114, 115, 110, 0, 0, 0, 64, 0, 50, 0, 46, 0, 48, 0, 47, 0, 83, 0, 101, 0, 114, 0, 97, 0, 116, 0, 111, 0, 32, 0, 83, 0, 99, 0, 114, 0, 97, 0, 116, 0, 99, 0, 104, 0, 32, 0, 76, 0, 73, 0, 86, 0, 69, 0, 32, 0, 68, 0, 97, 0, 116, 0, 97, 0, 98, 0, 97, 0, 115, 0, 101, 111, 116, 114, 107, 0, 0, 2, 201, 116, 116, 121, 112, 0, 0, 0, 6, 0, 109, 0, 112, 0, 51, 112, 102, 105, 108, 0, 0, 0, 118, 0, 85, 0, 115, 0, 101, 0, 114, 0, 115, 0, 47, 0, 101, 0, 108, 0, 97, 0, 100, 0, 47, 0, 68, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 47, 0, 48, 0, 49, 0, 32, 0, 66, 0, 111, 0, 121, 0, 122, 0, 32, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 72, 0, 111, 0, 111, 0, 100, 0, 32, 0, 40, 0, 68, 0, 105, 0, 114, 0, 116, 0, 121, 0, 41, 0, 40, 0, 49, 0, 50, 0, 41, 0, 46, 0, 109, 0, 112, 0, 51, 116, 115, 110, 103, 0, 0, 0, 56, 0, 66, 0, 111, 0, 121, 0, 122, 0, 32, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 72, 0, 111, 0, 111, 0, 100, 0, 32, 0, 40, 0, 68, 0, 105, 0, 114, 0, 116, 0, 121, 0, 41, 0, 40, 0, 49, 0, 50, 0, 41, 116, 97, 114, 116, 0, 0, 0, 6, 0, 78, 0, 87, 0, 65, 116, 97, 108, 98, 0, 0, 0, 44, 0, 83, 0, 116, 0, 114, 0, 97, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 79, 0, 117, 0, 116, 0, 116, 0, 97, 0, 32, 0, 67, 0, 111, 0, 109, 0, 112, 0, 116, 0, 111, 0, 110, 116, 103, 101, 110, 0, 0, 0, 48, 0, 72, 0, 105, 0, 112, 0, 32, 0, 72, 0, 111, 0, 112, 0, 32, 0, 47, 0, 32, 0, 56, 0, 48, 0, 39, 0, 115, 0, 32, 0, 79, 0, 108, 0, 100, 0, 115, 0, 99, 0, 104, 0, 111, 0, 111, 0, 108, 116, 108, 101, 110, 0, 0, 0, 16, 0, 48, 0, 52, 0, 58, 0, 48, 0, 52, 0, 46, 0, 51, 0, 48, 116, 98, 105, 116, 0, 0, 0, 18, 0, 50, 0, 50, 0, 52, 0, 46, 0, 48, 0, 107, 0, 98, 0, 112, 0, 115, 116, 115, 109, 112, 0, 0, 0, 10, 0, 52, 0, 52, 0, 46, 0, 49, 0, 107, 116, 98, 112, 109, 0, 0, 0, 10, 0, 56, 0, 55, 0, 46, 0, 56, 0, 49, 116, 99, 111, 109, 0, 0, 0, 4, 0, 54, 0, 65, 116, 99, 109, 112, 0, 0, 0, 54, 0, 46, 0, 56, 0, 48, 0, 115, 0, 46, 0, 32, 0, 46, 0, 57, 0, 48, 0, 115, 0, 46, 0, 32, 0, 46, 0, 114, 0, 97, 0, 112, 0, 46, 0, 32, 0, 46, 0, 103, 0, 97, 0, 110, 0, 103, 0, 115, 0, 116, 0, 97, 0, 46, 116, 97, 100, 100, 0, 0, 0, 20, 0, 49, 0, 53, 0, 55, 0, 53, 0, 48, 0, 52, 0, 56, 0, 51, 0, 49, 0, 50, 116, 107, 101, 121, 0, 0, 0, 4, 0, 54, 0, 65, 117, 97, 100, 100, 0, 0, 0, 4, 93, 225, 84, 120, 117, 116, 107, 110, 0, 0, 0, 4, 0, 0, 0, 1, 117, 108, 98, 108, 0, 0, 0, 4, 0, 255, 255, 255, 117, 116, 109, 101, 0, 0, 0, 4, 93, 145, 181, 35, 117, 116, 112, 99, 0, 0, 0, 4, 0, 0, 0, 2, 115, 98, 97, 118, 0, 0, 0, 2, 2, 1, 98, 104, 114, 116, 0, 0, 0, 1, 1, 98, 109, 105, 115, 0, 0, 0, 1, 0, 98, 112, 108, 121, 0, 0, 0, 1, 1, 98, 108, 111, 112, 0, 0, 0, 1, 0, 98, 105, 116, 117, 0, 0, 0, 1, 0, 98, 111, 118, 99, 0, 0, 0, 1, 1, 98, 99, 114, 116, 0, 0, 0, 1, 0, 98, 105, 114, 111, 0, 0, 0, 1, 0, 98, 119, 108, 98, 0, 0, 0, 1, 0, 98, 119, 108, 108, 0, 0, 0, 1, 0, 98, 117, 110, 115, 0, 0, 0, 1, 0, 98, 98, 103, 108, 0, 0, 0, 1, 0, 98, 107, 114, 107, 0, 0, 0, 1, 0]*/
		/* [118, 114, 115, 110, 0, 0, 0, 64, 0, 50, 0, 46, 0, 48, 0, 47, 0, 83, 0, 101, 0, 114, 0, 97, 0, 116, 0, 111, 0, 32, 0, 83, 0, 99, 0, 114, 0, 97, 0, 116, 0, 99, 0, 104, 0, 32, 0, 76, 0, 73, 0, 86, 0, 69, 0, 32, 0, 68, 0, 97, 0, 116, 0, 97, 0, 98, 0, 97, 0, 115, 0, 101, 111, 116, 114, 107, 0, 0, 2, 201, 116, 116, 121, 112, 0, 0, 0, 6, 0, 109, 0, 112, 0, 51, 112, 102, 105, 108, 0, 0, 0, 118, 0, 85, 0, 115, 0, 101, 0, 114, 0, 115, 0, 47, 0, 101, 0, 108, 0, 97, 0, 100, 0, 47, 0, 68, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 47, 0, 48, 0, 49, 0, 32, 0, 66, 0, 111, 0, 121, 0, 122, 0, 32, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 72, 0, 111, 0, 111, 0, 100, 0, 32, 0, 40, 0, 68, 0, 105, 0, 114, 0, 116, 0, 121, 0, 41, 0, 40, 0, 49, 0, 50, 0, 41, 0, 46, 0, 109, 0, 112, 0, 51, 116, 115, 110, 103, 0, 0, 0, 56, 0, 66, 0, 111, 0, 121, 0, 122, 0, 32, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 72, 0, 111, 0, 111, 0, 100, 0, 32, 0, 40, 0, 68, 0, 105, 0, 114, 0, 116, 0, 121, 0, 41, 0, 40, 0, 49, 0, 50, 0, 41, 116, 97, 114, 116, 0, 0, 0, 6, 0, 78, 0, 87, 0, 65, 116, 97, 108, 98, 0, 0, 0, 44, 0, 83, 0, 116, 0, 114, 0, 97, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 79, 0, 117, 0, 116, 0, 116, 0, 97, 0, 32, 0, 67, 0, 111, 0, 109, 0, 112, 0, 116, 0, 111, 0, 110, 116, 103, 101, 110, 0, 0, 0, 48, 0, 72, 0, 105, 0, 112, 0, 32, 0, 72, 0, 111, 0, 112, 0, 32, 0, 47, 0, 32, 0, 56, 0, 48, 0, 39, 0, 115, 0, 32, 0, 79, 0, 108, 0, 100, 0, 115, 0, 99, 0, 104, 0, 111, 0, 111, 0, 108, 116, 108, 101, 110, 0, 0, 0, 16, 0, 48, 0, 52, 0, 58, 0, 48, 0, 52, 0, 46, 0, 51, 0, 48, 116, 98, 105, 116, 0, 0, 0, 18, 0, 50, 0, 50, 0, 52, 0, 46, 0, 48, 0, 107, 0, 98, 0, 112, 0, 115, 116, 115, 109, 112, 0, 0, 0, 10, 0, 52, 0, 52, 0, 46, 0, 49, 0, 107, 116, 98, 112, 109, 0, 0, 0, 10, 0, 56, 0, 55, 0, 46, 0, 56, 0, 49, 116, 99, 111, 109, 0, 0, 0, 4, 0, 54, 0, 65, 116, 99, 109, 112, 0, 0, 0, 54, 0, 46, 0, 56, 0, 48, 0, 115, 0, 46, 0, 32, 0, 46, 0, 57, 0, 48, 0, 115, 0, 46, 0, 32, 0, 46, 0, 114, 0, 97, 0, 112, 0, 46, 0, 32, 0, 46, 0, 103, 0, 97, 0, 110, 0, 103, 0, 115, 0, 116, 0, 97, 0, 46, 116, 97, 100, 100, 0, 0, 0, 20, 0, 49, 0, 53, 0, 55, 0, 53, 0, 48, 0, 52, 0, 56, 0, 51, 0, 49, 0, 50, 116, 107, 101, 121, 0, 0, 0, 4, 0, 54, 0, 65, 117, 97, 100, 100, 0, 0, 0, 4, 93, 225, 84, 120, 117, 116, 107, 110, 0, 0, 0, 4, 0, 0, 0, 1, 117, 108, 98, 108, 0, 0, 0, 4, 0, 255, 255, 255, 117, 116, 109, 101, 0, 0, 0, 4, 93, 145, 181, 35, 117, 116, 112, 99, 0, 0, 0, 4, 0, 0, 0, 2, 115, 98, 97, 118, 0, 0, 0, 2, 2, 1, 98, 104, 114, 116, 0, 0, 0, 1, 1, 98, 109, 105, 115, 0, 0, 0, 1, 0, 98, 112, 108, 121, 0, 0, 0, 1, 1, 98, 108, 111, 112, 0, 0, 0, 1, 0, 98, 105, 116, 117, 0, 0, 0, 1, 0, 98, 111, 118, 99, 0, 0, 0, 1, 1, 98, 99, 114, 116, 0, 0, 0, 1, 0, 98, 105, 114, 111, 0, 0, 0, 1, 0, 98, 119, 108, 98, 0, 0, 0, 1, 0, 98, 119, 108, 108, 0, 0, 0, 1, 0, 98, 117, 110, 115, 0, 0, 0, 1, 0, 98, 98, 103, 108, 0, 0, 0, 1, 0, 98, 107, 114, 107, 0, 0, 0, 1, 0]
		 */
		
		FileInputStream fis = new FileInputStream(smallDb);
		IntBuffer ibuf = IntBuffer.allocate(fis.available());
		
		int b;
		while ((b = fis.read()) >= 0) {
//			bbuf.put((byte)b);
			ibuf.put(b);
		}
		
		int ipos = ibuf.position();
	}
	
	
	
	@Ignore
	@Test public void writeSslbuffer() throws IOException {
		String dbPath = "/Users/elad/Desktop/test/2_song_db";
		String writePath = "/Users/elad/Desktop/test/2_song_db_2";
		File existingDFile = new File(dbPath);
		File newDbFile = new File(writePath);
		
		SslBuffer buf = new SslBuffer(existingDFile);
		
		FileOutputStream streamToNewFile = new FileOutputStream(newDbFile, false);
		
		streamToNewFile.write(buf.toBytes());
	}
	
	@Test public void clearPlayCounts() {
		
	}
	
	@Ignore
	@Test public void unmarshal_RealDB() {
		String dbPath = "/Users/elad/Music/_Serato_/database V2";
		File smallDb = new File(dbPath);
		UnmarshalSeratoDbFileRequest msg = new UnmarshalSeratoDbFileRequest(smallDb);
		
		api.accept(msg);
	}
	
	@Ignore
	@Test public void unmarshal_large_SongDB() {
		String dbPath = "/Users/elad/Desktop/test/db_large";
		File smallDb = new File(dbPath);
		UnmarshalSeratoDbFileRequest msg = new UnmarshalSeratoDbFileRequest(smallDb);
		
		api.accept(msg);
	}

}
